## Phân Tích & Đánh Giá Chi Tiết Từng Tiêu Chí B3 FileInfector 🧐

Tiêu chí 1: Chỉ có một tiến trình lây lan (dùng Mutex) ✅

	Phân tích: Sử dụng CreateMutexA với một tên cố định (PEInfectorMutex) ngay khi chương trình khởi động. Sau đó, bạn kiểm tra kết quả của GetLastError để xem có bằng ERROR_ALREADY_EXISTS hay không. Đảm bảo chỉ có một instance của chương trình đang chạy tại một thời điểm. 

Đoạn mã
invoke CreateMutexA, NULL, FALSE, ADDR mutex_name
invoke GetLastError
.IF eax == ERROR_ALREADY_EXISTS
    jmp @@exit
.ENDIF


Tiêu chí 2: Hiển thị MessageBox khi file bị nhiễm được thực thi ✅ 

Phân tích: Phần virus_stub 
	Dùng kỹ thuật call delta_offset / pop ebp để lấy địa chỉ cơ sở của stub trong bộ nhớ. Việc trừ đi offset (sub ebp, (offset delta_offset - offset virus_stub)) là cần thiết, đảm bảo ebp luôn trỏ đúng vào đầu stub dù nó được chép đi bất cứ đâu.

	Runtime API Loading: Stub không gọi trực tiếp MessageBoxA mà nạp user32.dll qua LoadLibraryA, sau đó lấy địa chỉ MessageBoxA qua GetProcAddress. Các địa chỉ của hai hàm này được "patch" vào stub trong quá trình lây nhiễm.


Tiêu chí 3: Tìm file PE 32-bit (.exe và .dll) trong L:\test ✅

	Phân tích: Sử dụng FindFirstFileA / FindNextFileA với đường dẫn L:\test\*.*.

	Lọc file PE 32-bit: Mã của tôi không lọc file dựa trên phần mở rộng (.exe hay .dll). Thay vào đó, bạn đọc và kiểm tra header của mọi file tìm được để xác định xem nó có phải là file PE 32-bit hợp lệ hay không ('ZM' signature, 'PE' signature, IMAGE_FILE_MACHINE_I386).


Tiêu chí 4: Kiểm tra infection marker (tránh lây nhiễm trùng) ✅ 

	Phân tích: Hàm CheckInfected 
	- Tôi duyệt qua từng section header của file PE và so sánh tên của chúng với chuỗi marker ".infect". 



Tiêu chí 5: Cơ chế lây nhiễm (thêm section, sửa Entry Point) ✅ 

	Phân tích: Thêm Section Mới

	Hàm AddInfectionSection tính toán chính xác các giá trị quan trọng cho section header mới: VirtualAddress, PointerToRawData (có tính đến SectionAlignment và FileAlignment), VirtualSize, và SizeOfRawData.

	Đặt Tên Section: Đặt tên section mới là ".infect", đáp ứng đúng yêu cầu và liên kết chặt chẽ với Tiêu chí 4.

	Cập nhật PE Header: Tăng NumberOfSections, cập nhật SizeOfImage, và quan trọng nhất là thay đổi AddressOfEntryPoint để trỏ đến RVA của section mới.

	Sao chép Mã độc: Trong hàm InfectFile, bạn chép virus_stub vào vị trí đã được tính toán trong buffer.

	Patching Stub: Bạn đã patch các địa chỉ cần thiết (pLoadLibraryA, pGetProcAddress, original_entry_point_val, và rva_stub) vào trong bản sao của stub. Việc patch rva_stub là một bước rất quan trọng để stub có thể hoạt động đúng trong môi trường có ASLR.



Tiêu chí 6: Đảm bảo file gốc vẫn hoạt động bình thường ✅ 
	
	Phân tích: Logic trả quyền điều khiển về chương trình gốc (host) trong virus_stub và có khả năng chống ASLR.

	ImageBase_Thực_Tế = EBP (Địa chỉ tuyệt đối của stub) - RVA_của_stub

	Địa chỉ OEP tuyệt đối = ImageBase_Thực_Tế + OEP_đã_lưu

	jmp eax Đây là cách làm chuẩn mực để tính toán địa chỉ của Original Entry Point (OEP) tại thời điểm thực thi và chuyển hướng đến đó. Kỹ thuật này đảm bảo file gốc sẽ tiếp tục chạy như bình thường sau khi mã độc đã thực thi xong.



Tiêu chí 7: Không lây file hệ thống (.sys) và chính nó ✅ 
	Phân tích:

	Bỏ qua file .sys: Hàm IsSystemFile thực hiện đúng chức năng bằng cách tìm phần mở rộng của file và so sánh với "sys".

	Bỏ qua chính nó: Trong infection_loop, bạn lấy đường dẫn của chính file virus bằng GetModuleFileNameA, sau đó so sánh nó với đường dẫn của file mục tiêu. Đây là cách làm đơn giản và hiệu quả.


END.